/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RedLibrarian;

/**
 *
 * @author Joseph
 */

import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 * Main window for application
 * @author Joseph
 */
public class UserInterface extends javax.swing.JFrame {

    private static String filter = "All";
    private boolean exactMatch = false;
    
    private int selectedUID;
    private int selectedPID;
    private String selectedTitle;
    private String selectedComposer;
    private String selectedLibrary;
    private String selectedDate;
    
    /**
     * Creates new form UserInterface
     * @throws java.sql.SQLException Thrown if the user interface cannot connect the server.
     */ 
    public UserInterface() throws SQLException {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("Icon.png")).getImage());
        fillTable(musicTable, SQL_JDBC.getAllMusic());
        
        selection_panel.setVisible(false);
        
        this.pack();
        
        this.setVisible(true);     
    }

    /**
     * Clears the given table and replaces cells with the given array
     * @param table The table to refresh
     * @param results The array of information to fill the table with
     */
    public void refreshTable(javax.swing.JTable table, String [][] results) {
        clearTable(table);
        fillTable(table, results);
        System.out.println("REFRESH COMPLETE");
    }
    /**
     * Adds rows to the given table with the given array
     * @param table The table to fill
     * @param results The array of information to fill the table with
     */
    public void fillTable(javax.swing.JTable table, String [][] results) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        for(String [] r:results)
            model.addRow(r);
    }
    /**
     * Clears all rows of a given table
     * @param table The table to clear
     */
    public void clearTable(javax.swing.JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        table.revalidate();
    }
    /**
     * Resets the given table to the given number of blank rows
     * @param table The table to reset
     * @param rows The number of blank rows to create
     */
    private void resetTable(javax.swing.JTable table, int rows) {
        clearTable(table);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(rows);
    }
    /**
     * Determines if a given row is empty
     * @param model The table model to evaluate 
     * @param row The row to evaluate
     * @return Returns true is the row is empty
     */
    public boolean isEmptyRow(javax.swing.table.DefaultTableModel model, int row) {
        for(int c=0;c<model.getColumnCount();c++)
            if(model.getValueAt(row,c)!=null)
                return false;
        return true;
    }

    protected void updateSelection(int id, String title, String composer, String library) {
        selectedPID = id;
        selectedTitle = title;
        selectedComposer = composer;
        selectedLibrary = library;
        updateSelectionOutput();
    }
    protected void updateSelectionOutput() {
        id_field.setText(selectedPID+"");
        title_field.setText(selectedTitle);
        composer_field.setText(selectedComposer);
        library_field.setText(selectedLibrary);
        
        selection_panel.setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        OtherTab = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        musicTable = new javax.swing.JTable();
        selection_panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        id_field = new javax.swing.JTextField();
        title_field = new javax.swing.JTextField();
        composer_field = new javax.swing.JTextField();
        library_field = new javax.swing.JTextField();
        delete_button = new javax.swing.JToggleButton();
        update_button = new javax.swing.JToggleButton();
        hide_button = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        add_musicTable = new javax.swing.JTable();
        add_items = new javax.swing.JButton();
        clear_items = new javax.swing.JButton();
        search_field = new javax.swing.JTextField();
        search_button = new javax.swing.JButton();
        search_filter = new javax.swing.JComboBox();
        filter_label = new javax.swing.JLabel();
        exactMatch_check = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        file_menu = new javax.swing.JMenu();
        file_menu_exit = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        help_menu = new javax.swing.JMenu();
        help_menu_getHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RedLibrarian");

        musicTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Composer", "Library"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        musicTable.setColumnSelectionAllowed(true);
        musicTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                musicTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(musicTable);
        musicTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (musicTable.getColumnModel().getColumnCount() > 0) {
            musicTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            musicTable.getColumnModel().getColumn(1).setPreferredWidth(600);
            musicTable.getColumnModel().getColumn(2).setPreferredWidth(400);
            musicTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        selection_panel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Title");

        jLabel2.setText("Composer");

        jLabel3.setText("Library");

        jLabel4.setText("ID");

        jLabel5.setText("Selection Information");

        id_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                id_fieldActionPerformed(evt);
            }
        });

        delete_button.setText("Delete");
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });

        update_button.setText("Update Item");
        update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_buttonActionPerformed(evt);
            }
        });

        hide_button.setText("Hide");
        hide_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hide_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout selection_panelLayout = new javax.swing.GroupLayout(selection_panel);
        selection_panel.setLayout(selection_panelLayout);
        selection_panelLayout.setHorizontalGroup(
            selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selection_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(selection_panelLayout.createSequentialGroup()
                        .addGroup(selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(selection_panelLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(hide_button))
                            .addGroup(selection_panelLayout.createSequentialGroup()
                                .addGroup(selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(selection_panelLayout.createSequentialGroup()
                                        .addComponent(update_button, javax.swing.GroupLayout.PREFERRED_SIZE, 95, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(delete_button, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(id_field)
                                    .addComponent(title_field)
                                    .addComponent(composer_field)
                                    .addComponent(library_field, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addContainerGap())))
        );
        selection_panelLayout.setVerticalGroup(
            selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selection_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(hide_button))
                .addGap(1, 1, 1)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(id_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(title_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(composer_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(library_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete_button)
                    .addComponent(update_button))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selection_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(selection_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE))
                .addContainerGap())
        );

        OtherTab.addTab("View Music", jPanel3);

        add_musicTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Composer", "Library"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        add_musicTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                add_musicTablePropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(add_musicTable);
        if (add_musicTable.getColumnModel().getColumnCount() > 0) {
            add_musicTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            add_musicTable.getColumnModel().getColumn(1).setPreferredWidth(600);
            add_musicTable.getColumnModel().getColumn(2).setPreferredWidth(400);
            add_musicTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        add_items.setText("Add Items");
        add_items.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add_itemsMouseClicked(evt);
            }
        });

        clear_items.setText("Clear Entrries");
        clear_items.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_itemsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(clear_items)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(add_items)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add_items)
                    .addComponent(clear_items))
                .addContainerGap())
        );

        OtherTab.addTab("Add Music", jPanel1);

        search_field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search_fieldKeyPressed(evt);
            }
        });

        search_button.setText("Search");
        search_button.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        search_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                search_buttonMouseClicked(evt);
            }
        });
        search_button.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                search_buttonKeyTyped(evt);
            }
        });

        search_filter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Title", "Composer", "Library", "ID", "Date" }));
        search_filter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                search_filterItemStateChanged(evt);
            }
        });

        filter_label.setText("Search by");

        exactMatch_check.setText("Exact Match");
        exactMatch_check.setToolTipText("If checked, searches will only return items that exactly match the query.");
        exactMatch_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exactMatch_checkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelLayout = new javax.swing.GroupLayout(Panel);
        Panel.setLayout(PanelLayout);
        PanelLayout.setHorizontalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OtherTab)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelLayout.createSequentialGroup()
                                .addComponent(search_field, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(search_button))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelLayout.createSequentialGroup()
                                .addComponent(filter_label)
                                .addGap(18, 18, 18)
                                .addComponent(search_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(exactMatch_check)))))
                .addContainerGap())
            .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        PanelLayout.setVerticalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filter_label)
                    .addComponent(exactMatch_check)
                    .addComponent(search_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search_button)
                    .addComponent(search_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OtherTab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelLayout.createSequentialGroup()
                    .addGap(0, 375, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 375, Short.MAX_VALUE)))
        );

        file_menu.setText("File");
        file_menu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        file_menu_exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        file_menu_exit.setText("Exit");
        file_menu_exit.setToolTipText("Closes the application");
        file_menu_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_menu_exitActionPerformed(evt);
            }
        });
        file_menu.add(file_menu_exit);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Refresh Table");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        file_menu.add(jMenuItem1);

        jMenuBar1.add(file_menu);

        help_menu.setText("Help");

        help_menu_getHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        help_menu_getHelp.setText("Get Help");
        help_menu_getHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                help_menu_getHelpActionPerformed(evt);
            }
        });
        help_menu.add(help_menu_getHelp);

        jMenuBar1.add(help_menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void file_menu_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_menu_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_file_menu_exitActionPerformed

    private void help_menu_getHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_help_menu_getHelpActionPerformed
        Help help_screen = new Help();
        help_screen.setVisible(true);
    }//GEN-LAST:event_help_menu_getHelpActionPerformed

    private void exactMatch_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exactMatch_checkActionPerformed
        exactMatch = !exactMatch;
    }//GEN-LAST:event_exactMatch_checkActionPerformed

    private void search_filterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_search_filterItemStateChanged
        filter = (String) search_filter.getSelectedItem();
        if(filter.equals("Date"))
        filter="date_added";
        if(filter.equals("ID"))
        filter="pid";
    }//GEN-LAST:event_search_filterItemStateChanged

    private void search_buttonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_buttonKeyTyped
        searchMusicTable();
    }//GEN-LAST:event_search_buttonKeyTyped

    private void search_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_search_buttonMouseClicked
        searchMusicTable();
    }//GEN-LAST:event_search_buttonMouseClicked

    private void search_fieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_fieldKeyPressed
        if(evt.getKeyCode()==(KeyEvent.VK_ENTER))
        searchMusicTable();
    }//GEN-LAST:event_search_fieldKeyPressed

    private void clear_itemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_itemsActionPerformed
        clear_items.setEnabled(false);
        resetTable(add_musicTable, 1);
        clear_items.setEnabled(true);
    }//GEN-LAST:event_clear_itemsActionPerformed

    private void add_itemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add_itemsMouseClicked
        add_items.setEnabled(false);
        DefaultTableModel model = (DefaultTableModel) add_musicTable.getModel();
        String [][] items = new String [model.getRowCount()][4];
        for(int r=0;r<model.getRowCount();r++)
        {
            if(!isEmptyRow(model,r))
            SQL_JDBC.executeStatement("INSERT INTO music (pid,title,composer,library,date_added) VALUES ("
                +Integer.parseInt(model.getValueAt(r,0)+"")+",'"+model.getValueAt(r,1)+"','"+model.getValueAt(r,2)+"','"
                +model.getValueAt(r,3)+"',curdate())");

        }
        resetTable(add_musicTable, 1);
        try {
            refreshTable(musicTable, SQL_JDBC.getAllMusic());
        } catch (SQLException ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        add_items.setEnabled(true);
    }//GEN-LAST:event_add_itemsMouseClicked

    private void add_musicTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_add_musicTablePropertyChange
        DefaultTableModel model = (DefaultTableModel) add_musicTable.getModel();
        if(!isEmptyRow(model,model.getRowCount()-1))
        model.addRow(new String [] {null,null,null,null});
    }//GEN-LAST:event_add_musicTablePropertyChange

    private void hide_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hide_buttonActionPerformed
        selection_panel.setVisible(false);
    }//GEN-LAST:event_hide_buttonActionPerformed

    private void update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_buttonActionPerformed
        update_button.setEnabled(false);
        SQL_JDBC.executeStatement("UPDATE music SET pid="+id_field.getText()+", title='"+title_field.getText()+"', composer='"+composer_field.getText()+"', library='"+library_field.getText()+
            "' WHERE pid="+selectedPID+" AND title='"+selectedTitle+"' AND composer='"+selectedComposer+"' AND library='"+selectedLibrary+"'");
        try {
            refreshTable(musicTable, SQL_JDBC.getAllMusic());
        } catch (SQLException ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateSelection(Integer.parseInt(id_field.getText()),title_field.getText(),composer_field.getText(),library_field.getText());
        update_button.setEnabled(true);
    }//GEN-LAST:event_update_buttonActionPerformed

    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_buttonActionPerformed
        delete_button.setEnabled(false);
        SQL_JDBC.executeStatement("DELETE FROM music WHERE pid='"+selectedPID+"' AND title='"+selectedTitle+"' AND composer='"+selectedComposer+"' AND library='"+selectedLibrary+"'");
        try {
            refreshTable(musicTable, SQL_JDBC.getAllMusic());
        } catch (SQLException ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        delete_button.setEnabled(true);
    }//GEN-LAST:event_delete_buttonActionPerformed

    private void id_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_id_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_id_fieldActionPerformed

    private void musicTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_musicTableMouseClicked
        int id = Integer.parseInt(musicTable.getValueAt(musicTable.getSelectedRow(), 0)+"");
        String title = (String) musicTable.getValueAt(musicTable.getSelectedRow(), 1);
        String composer = (String) musicTable.getValueAt(musicTable.getSelectedRow(), 2);
        String library = (String) musicTable.getValueAt(musicTable.getSelectedRow(), 3);

        updateSelection(id,title,composer,library);
    }//GEN-LAST:event_musicTableMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       try {
            refreshTable(musicTable, SQL_JDBC.getAllMusic());
        } catch (SQLException ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed
   
    private void searchMusicTable() { 
        search_button.setEnabled(false);
        ResultTable results = new ResultTable(search_field.getText(),filter,exactMatch);
        results.setVisible(true);
        search_button.setEnabled(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new RunnableImpl());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane OtherTab;
    private javax.swing.JPanel Panel;
    private javax.swing.JButton add_items;
    private javax.swing.JTable add_musicTable;
    private javax.swing.JButton clear_items;
    private javax.swing.JTextField composer_field;
    private javax.swing.JToggleButton delete_button;
    private javax.swing.JCheckBox exactMatch_check;
    private javax.swing.JMenu file_menu;
    private javax.swing.JMenuItem file_menu_exit;
    private javax.swing.JLabel filter_label;
    private javax.swing.JMenu help_menu;
    private javax.swing.JMenuItem help_menu_getHelp;
    private javax.swing.JToggleButton hide_button;
    private javax.swing.JTextField id_field;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField library_field;
    private javax.swing.JTable musicTable;
    private javax.swing.JButton search_button;
    private javax.swing.JTextField search_field;
    private javax.swing.JComboBox search_filter;
    private javax.swing.JPanel selection_panel;
    private javax.swing.JTextField title_field;
    private javax.swing.JToggleButton update_button;
    // End of variables declaration//GEN-END:variables

    private static class RunnableImpl implements Runnable {

        public RunnableImpl() {
        }

        @Override
        public void run() {
            try {
                new UserInterface().setVisible(true);
            }
            catch(SQLException e) {
                System.out.println(e);
            }
            
        }
    }
}
